<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">
    <!-- CostComponent services -->
    <simple-method method-name="createCostComponent" short-description="Create a CostComponent">
        <make-value value-field="newEntity" entity-name="CostComponent"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <sequenced-id sequence-name="CostComponent" field="newEntity.costComponentId"/>
        <field-to-result field="newEntity.costComponentId" result-name="costComponentId"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>
        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateCostComponent" short-description="Update a CostComponent">
        <entity-one entity-name="CostComponent" value-field="costComponent"/>
        <set-nonpk-fields map="parameters" value-field="costComponent"/>
        <store-value value-field="costComponent"/>
    </simple-method>
    <simple-method method-name="deleteCostComponent" short-description="Delete a CostComponent">
        <entity-one entity-name="CostComponent" value-field="costComponent"/>
        <remove-value value-field="costComponent"/>
    </simple-method>
    <simple-method method-name="cancelCostComponents" short-description="Cancels CostComponents">
        <set from-field="parameters.costComponentId" field="costsAndMap.costComponentId"/>
        <set from-field="parameters.productId" field="costsAndMap.productId"/>
        <set from-field="parameters.costUomId" field="costsAndMap.costUomId"/>
        <set from-field="parameters.costComponentTypeId" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="existingCosts"/>
        <filter-list-by-date list="existingCosts"/>
        <iterate list="existingCosts" entry="existingCost">
            <now-timestamp field="existingCost.thruDate"/>
            <store-value value-field="existingCost"/>
        </iterate>
    </simple-method>
    <simple-method method-name="recreateCostComponent" short-description="Create a CostComponent and cancel the existing ones">
        <!-- The existing costs of the same type are expired -->
        <set from-field="parameters.productId" field="costsAndMap.productId"/>
        <set from-field="parameters.costUomId" field="costsAndMap.costUomId"/>
        <set from-field="parameters.costComponentTypeId" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="existingCosts"/>
        <filter-list-by-date list="existingCosts"/>
        <iterate list="existingCosts" entry="existingCost">
            <now-timestamp field="existingCost.thruDate"/>
            <store-value value-field="existingCost"/>
        </iterate>
        <!-- The new cost is created -->
        <make-value value-field="newEntity" entity-name="CostComponent"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <sequenced-id sequence-name="CostComponent" field="newEntity.costComponentId"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>
        <create-value value-field="newEntity"/>
        <field-to-result field="newEntity.costComponentId" result-name="costComponentId"/>
    </simple-method>

    <!-- Services to get the product and tasks costs -->
    <simple-method method-name="getProductCost" short-description="Gets the product's costs (from CostComponent or ProductPrice)">
        <entity-condition list="costComponents" entity-name="CostComponent" filter-by-date="true">
            <condition-list>
                <condition-expr field-name="productId" operator="equals" from-field="parameters.productId"/>
                <condition-expr field-name="costUomId" operator="equals" from-field="parameters.currencyUomId"/>
                <condition-expr field-name="costComponentTypeId" operator="like" value="${parameters.costComponentTypePrefix}_%"/>
            </condition-list>
        </entity-condition>
        <set field="productCost" value="0" type="BigDecimal"/>
        <iterate entry="costComponent" list="costComponents">
            <calculate field="productCost" decimal-scale="6">
                <calcop field="costComponent.cost" operator="add">
                    <calcop field="productCost" operator="get"/>
                </calcop>
            </calculate>
            <!--set field="productCost" value="${costComponent.cost + productCost}" type="BigDecimal"/-->
        </iterate>
        <!-- if the cost is zero, and the product is a variant, get the cost of the virtual -->
        <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
            <entity-one entity-name="Product" value-field="product"/>
            <set from-field="product.productId" field="assocAndMap.productIdTo"/>
            <set value="PRODUCT_VARIANT" field="assocAndMap.productAssocTypeId"/>
            <find-by-and entity-name="ProductAssoc" map="assocAndMap" list="virtualAssocs"/>
            <filter-list-by-date list="virtualAssocs"/>
            <first-from-list list="virtualAssocs" entry="virtualAssoc"/>
            <if-not-empty field="virtualAssoc">
                <set from-field="virtualAssoc.productId" field="inputMap.productId"/>
                <set from-field="parameters.currencyUomId" field="inputMap.currencyUomId"/>
                <set from-field="parameters.costComponentTypePrefix" field="inputMap.costComponentTypePrefix"/>
                <call-service service-name="getProductCost" in-map-name="inputMap">
                    <result-to-field result-name="productCost"/>
                </call-service>
            </if-not-empty>
        </if-compare>
        <!-- if the cost is zero, get the purchase cost from the SupplierProduct -->
        <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
            <set field="orderByList[]" value="+supplierPrefOrderId"/>
            <set field="orderByList[]" value="+lastPrice"/>
            <clear-field field="costsAndMap"/>
            <set from-field="parameters.productId" field="costsAndMap.productId"/>
            <set from-field="parameters.currencyUomId" field="costsAndMap.currencyUomId"/>
            <find-by-and entity-name="SupplierProduct" map="costsAndMap" list="priceCosts" order-by-list="orderByList"/>
            <filter-list-by-date list="priceCosts" from-field-name="availableFromDate" thru-field-name="availableThruDate"/>
            <first-from-list list="priceCosts" entry="priceCost"/>
            <if-not-empty field="priceCost.lastPrice">
                <set from-field="priceCost.lastPrice" field="productCost"/>
            </if-not-empty>
            <!-- if the cost is zero, get the purchase cost from the SupplierProduct
                 in a different currency and try to convert
            -->
            <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
                <clear-field field="costsAndMap"/>
                <set from-field="parameters.productId" field="costsAndMap.productId"/>
                <set from-field="parameters.productPriceTypeId" field="costsAndMap.productPriceTypeId"/>
                <find-by-and entity-name="SupplierProduct" map="costsAndMap" list="priceCosts" order-by-list="orderByList"/>
                <filter-list-by-date list="priceCosts" from-field-name="availableFromDate" thru-field-name="availableThruDate"/>
                <first-from-list list="priceCosts" entry="priceCost"/>
                <if-not-empty field="priceCost.lastPrice">
                    <!-- we try to convert the lastPrice to the desired currency -->
                    <clear-field field="inputMap"/>
                    <set from-field="priceCost.lastPrice" field="inputMap.originalValue"/>
                    <set from-field="priceCost.currencyUomId" field="inputMap.uomId"/>
                    <set from-field="parameters.currencyUomId" field="inputMap.uomIdTo"/>
                    
                    <call-service service-name="convertUom" in-map-name="inputMap" require-new-transaction="true" break-on-error="false">
                        <result-to-field result-name="convertedValue" field="productCost"/>
                    </call-service>

                    <!-- if currency conversion fails then a 0 cost will be returned -->
                    <if-empty field="productCost">
                        <log level="warning" message="Currency conversion failed for ProductCost lookup; unable to convert from ${priceCost.currencyUomId} to ${parameters.currencyUomId}"/>
                        <set field="productCost" value="0" type="BigDecimal"/>
                    </if-empty>
                </if-not-empty>
            </if-compare>
        </if-compare>
        <!--
        <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
            <clear-field field="costsAndMap"/>
            <set from-field="parameters.productId" field="costsAndMap.productId"/>
            <set from-field="parameters.currencyUomId" field="costsAndMap.currencyUomId"/>
            <set from-field="parameters.productPriceTypeId" field="costsAndMap.productPriceTypeId"/>
            <find-by-and entity-name="ProductPrice" map="costsAndMap" list="priceCosts"/>
            <filter-list-by-date list="priceCosts"/>
            <first-from-list list="priceCosts" entry="priceCost"/>
            <if-not-empty field="priceCost.price">
                <set from-field="priceCost.price" field="productCost"/>
            </if-not-empty>
        </if-compare>
        -->
        <field-to-result field="productCost"/>
    </simple-method>

    <simple-method method-name="calculateProductAverageCost" short-description="Calculate inventory average cost for a product">
        <entity-condition entity-name="InventoryItem" list="inventoryItems">
            <condition-list>
                <condition-expr field-name="productId" from-field="parameters.productId"/>
                <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore-if-empty="true"/>
                <condition-expr field-name="ownerPartyId" from-field="parameters.ownerPartyId" ignore-if-empty="true"/>
                <condition-expr field-name="unitCost" operator="not-equals" from-field="nullField"/>
            </condition-list>
            <select-field field-name="quantityOnHandTotal"/>
            <select-field field-name="unitCost"/>
            <select-field field-name="currencyUomId"/>
        </entity-condition>
        <set field="totalQuantityOnHand" type="BigDecimal" value="0"/>
        <set field="totalInventoryCost" type="BigDecimal" value="0"/>
        <set field="absValOfTotalQOH" type="BigDecimal" value="0"/>
        <set field="absValOfTotalInvCost" type="BigDecimal" value="0"/>
        <set field="differentCurrencies" type="Boolean" value="false"/>
        <iterate list="inventoryItems" entry="inventoryItem">
            <calculate field="totalQuantityOnHand">
                <calcop operator="add" >
                    <calcop operator="get" field="totalQuantityOnHand"/>
                    <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                </calcop>
            </calculate>

            <if-empty field="currencyUomId">
                <set field="currencyUomId" from-field="inventoryItem.currencyUomId"/>
            </if-empty>
            <if-compare field="differentCurrencies" operator="equals" value="false" type="Boolean">
                <if-compare-field field="inventoryItem.currencyUomId" operator="equals" to-field="currencyUomId">
                    <calculate field="totalInventoryCost" type="BigDecimal">
                        <calcop operator="add">
                            <calcop operator="get" field="totalInventoryCost"/>
                            <calcop operator="multiply">
                                <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                                <calcop operator="get" field="inventoryItem.unitCost"/>
                            </calcop>
                        </calcop>
                    </calculate>

                    <!-- calculation of absolute values of QOH and total inventory cost -->
                    <if-compare field="inventoryItem.quantityOnHandTotal" operator="less" value="0">
                        <calculate field="absValOfTotalQOH">
                            <calcop operator="add">
                                <calcop operator="get" field="absValOfTotalQOH"/>
                                <calcop operator="negative" field="inventoryItem.quantityOnHandTotal"/>
                            </calcop>
                        </calculate>
                        <calculate field="absValOfTotalInvCost" type="BigDecimal">
                            <calcop operator="add">
                                <calcop operator="get" field="absValOfTotalInvCost"/>
                                <calcop operator="multiply">
                                    <calcop operator="negative" field="inventoryItem.quantityOnHandTotal"/>
                                    <calcop operator="get" field="inventoryItem.unitCost"/>
                                </calcop>
                            </calcop>
                        </calculate>
                        <else>
                        <calculate field="absValOfTotalQOH">
                            <calcop operator="add" >
                                <calcop operator="get" field="absValOfTotalQOH"/>
                                <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                            </calcop>
                        </calculate>
                        <calculate field="absValOfTotalInvCost" type="BigDecimal">
                            <calcop operator="add">
                                <calcop operator="get" field="absValOfTotalInvCost"/>
                                <calcop operator="multiply">
                                    <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                                    <calcop operator="get" field="inventoryItem.unitCost"/>
                                </calcop>
                            </calcop>
                        </calculate>
                        </else>
                    </if-compare>
                <else>
                    <set field="differentCurrencies" type="Boolean" value="true"/>
                </else>
                </if-compare-field>
            </if-compare>
        </iterate>

        <if-compare field="absValOfTotalQOH" operator="not-equals" value="0" type="BigDecimal">
            <calculate field="productAverageCost" type="BigDecimal">
                <calcop operator="divide">
                    <calcop operator="get" field="absValOfTotalInvCost"/>
                    <calcop operator="get" field="absValOfTotalQOH"/>
                </calcop>
            </calculate>
        <else>
            <set field="productAverageCost" type="BigDecimal" value="0"/>
        </else>
        </if-compare>
        <field-to-result field="totalQuantityOnHand"/>
        <if-compare field="differentCurrencies" operator="equals" value="false" type="Boolean">
            <field-to-result field="totalInventoryCost"/>
            <field-to-result field="productAverageCost"/>
            <field-to-result field="currencyUomId"/>
        </if-compare>
    </simple-method>

    <simple-method method-name="updateProductAverageCostOnReceiveInventory" short-description="Update a Product Average Cost record on receive inventory">
        <entity-one entity-name="InventoryItem" value-field="inventoryItem"/>
        <set field="organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <if-empty field="organizationPartyId">
            <entity-one entity-name="Facility" value-field="facility" auto-field-map="true"/>
            <set field="organizationPartyId" from-field="facility.ownerPartyId"/>
            <if-empty field="organizationPartyId">
                <get-related-one relation-name="ProductStore" to-value-field="productStore" value-field="facility"/>
                <set field="organizationPartyId" from-field="productStore.ownerPartyId"/>
                <if-empty field="organizationPartyId">
                    <add-error error-list-name="error_list">
                        <fail-property resource="ProductUiLabels" property="ProductOwnerPartyIsMissing"/>
                    </add-error>
                </if-empty>
                <check-errors/>
            </if-empty>
        </if-empty>

        <entity-and entity-name="ProductAverageCost" list="productAverageCostList" filter-by-date="true">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="facilityId" from-field="parameters.facilityId"/>
            <field-map field-name="productAverageCostTypeId" value="SIMPLE_AVG_COST"/>
            <field-map field-name="organizationPartyId"/>
        </entity-and>
        <first-from-list list="productAverageCostList" entry="productAverageCost"/>
        
        <!-- <log level="always" message="In updateProductAverageCostOnReceiveInventory found productAverageCost: ${productAverageCost}"/> -->

        <set-service-fields service-name="createProductAverageCost" map="parameters" to-map="productAverageCostMap"/>
        <set field="productAverageCostMap.productAverageCostTypeId" value="SIMPLE_AVG_COST"/>
        <set field="productAverageCostMap.organizationPartyId" from-field="organizationPartyId"/>
        <if-empty field="productAverageCost">
            <set field="productAverageCostMap.averageCost" from-field="inventoryItem.unitCost"/>
        <else>
            <!-- Expire existing one and calculate average cost -->
            <set-service-fields service-name="updateProductAverageCost" map="productAverageCost" to-map="updateProductAverageCostMap"/>
            <now-timestamp field="updateProductAverageCostMap.thruDate"/>
            <call-service service-name="updateProductAverageCost" in-map-name="updateProductAverageCostMap"/>
            
            <set field="serviceInMap.productId" from-field="parameters.productId"/>
            <set field="serviceInMap.facilityId" from-field="parameters.facilityId"/>
            <call-service service-name="getInventoryAvailableByFacility" in-map-name="serviceInMap">
                <result-to-field result-name="quantityOnHandTotal"/> 
            </call-service>
            
            <set field="oldProductQuantity" value="${quantityOnHandTotal - parameters.quantityAccepted}" type="BigDecimal"/>
            <set field="productAverageCostMap.averageCost" value="${((productAverageCost.averageCost * oldProductQuantity) + (inventoryItem.unitCost * parameters.quantityAccepted))/(quantityOnHandTotal)}" type="BigDecimal"/>
            <property-to-field resource="arithmetic" property="finaccount.decimals" field="roundingDecimals" default="2"/>
            <property-to-field resource="arithmetic" property="finaccount.roundingSimpleMethod" field="roundingMode" default="HalfUp"/>
            <calculate field="productAverageCostMap.averageCost" type="BigDecimal" decimal-scale="${roundingDecimals}" rounding-mode="${roundingMode}">
                <calcop operator="get" field="productAverageCostMap.averageCost"/>
            </calculate>
            
            <!-- ensure that the new ProductAverageCost record has a different PK than the previous one by setting the fromDate to now, plus an offset if needed -->
            <now-timestamp field="nowTimestamp"/>
            <set field="timeDiff" value="${groovy: return nowTimestamp.getTime() - productAverageCost.fromDate.getTime()}" type="Long"/>
            <if-compare field="timeDiff" operator="less-equals" value="1000" type="Long">
                <set-calendar field="productAverageCostMap.fromDate" from-field="nowTimestamp" seconds="+1"/>
                <else>
                    <set field="productAverageCostMap.fromDate" from-field="nowTimestamp"/>
                </else>
            </if-compare>
        </else>
        </if-empty>
        
        <!-- <log level="always" message="In updateProductAverageCostOnReceiveInventory creating new average cost with productAverageCostMap: ${productAverageCostMap}"/> -->
        <call-service service-name="createProductAverageCost" in-map-name="productAverageCostMap"/>
        <log level="info" message="For facilityId ${parameters.facilityId}, Average cost of product ${parameters.productId} is set from  ${updateProductAverageCostMap.averageCost} to ${productAverageCostMap.averageCost}"/>
    </simple-method>

    <simple-method method-name="getProductAverageCost" short-description="Service to get the average cost of product">
        <set field="inventoryItem" from-field="parameters.inventoryItem"/>
        <set field="getPartyAcctgPrefMap.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <call-service service-name="getPartyAccountingPreferences" in-map-name="getPartyAcctgPrefMap">
            <result-to-field result-name="partyAccountingPreference"/>
        </call-service>
        <if-compare field="partyAccountingPreference.cogsMethodId" operator="equals" value="COGS_AVG_COST">
            <entity-and entity-name="ProductAverageCost" list="productAverageCostList" filter-by-date="true">
                <field-map field-name="productAverageCostTypeId" value="SIMPLE_AVG_COST"/> <!-- TODO: handle for WEIGHTED_AVG_COST and MOVING_AVG_COST -->
                <field-map field-name="organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                <field-map field-name="productId" from-field="inventoryItem.productId"/>
                <field-map field-name="facilityId" from-field="inventoryItem.facilityId"/>
            </entity-and>
            <first-from-list list="productAverageCostList" entry="productAverageCost"/>
        </if-compare>
        <if-not-empty field="productAverageCost">
            <set field="unitCost" from-field="productAverageCost.averageCost" type="BigDecimal"/>
        <else>
            <set field="unitCost" from-field="inventoryItem.unitCost" type="BigDecimal"/>
        </else>
        </if-not-empty>
        <field-to-result field="unitCost"/>
    </simple-method>

    <simple-method method-name="productCostPercentageFormula" short-description="Formula that creates a cost component equal to a percentage of total product cost">
        <set field="productCostComponentCalc" from-field="parameters.productCostComponentCalc"/>
        <set field="costComponentCalc" from-field="parameters.costComponentCalc"/>
        <set field="inputMap.productId" from-field="productCostComponentCalc.productId"/>
        <set field="inputMap.currencyUomId" from-field="parameters.currencyUomId"/>
        <set field="inputMap.costComponentTypePrefix" from-field="parameters.costComponentTypePrefix"/>
        <call-service service-name="getProductCost" in-map-name="inputMap">
            <result-to-field result-name="productCost"/>
        </call-service>
        <!--set field="productCostAdjustment" value="${parameters.baseCost * costComponentCalc.fixedCost}" type="BigDecimal"/-->
        <calculate field="productCostAdjustment" type="BigDecimal" decimal-scale="6">
            <calcop operator="multiply" field="costComponentCalc.fixedCost">
                <calcop operator="get" field="parameters.baseCost"/>
            </calcop>
        </calculate>
        <field-to-result field="productCostAdjustment"/>
    </simple-method>
</simple-methods>
